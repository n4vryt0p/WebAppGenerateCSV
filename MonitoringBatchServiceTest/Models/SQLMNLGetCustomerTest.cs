using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonitoringBatchService.Models;

namespace MonitoringBatchServiceTest.Models
{
    public class SQLMNLGetCustomerTest
    {
        [Fact]
        public void filemonitoringtest()
        {
            // Arrange
            var keymodel = new SqlmnGetCustomer();
            DateTime validfrom = keymodel.VALID_FROM;
            DateTime validto = keymodel.VALID_TO;
            DateTime runtime = keymodel.RUN_TIMESTAMP;
            // Assert

            Assert.Null(keymodel.CUSTOMER_SOURCE_UNIQUE_ID);
            Assert.Null(keymodel.ORGUNIT_CODE);
            Assert.Null(keymodel.CUSTOMER_NAME);
            Assert.Null(keymodel.COMPANY_FORM);
            Assert.Null(keymodel.INCORPORATION_COUNTRY_CODE);
            Assert.Null(keymodel.BUSINESS_SEGMENT_1);
            Assert.Null(keymodel.DATE_OF_BIRTH);
            Assert.Null(keymodel.ADDRESS);
            Assert.Null(keymodel.ZONE);
            Assert.Null(keymodel.COUNTRY_OF_RESIDENCE);
            Assert.Null(keymodel.COUNTRY_OF_ORIGIN);
            Assert.Null(keymodel.GENDER_CODE);
            Assert.Null(keymodel.PRIME_BRANCH_ID);
            Assert.Null(keymodel.RELATIONSHIP_MGR_ID);
            Assert.Null(keymodel.NATIONALITY_CODE);
            Assert.Null(keymodel.OCCUPATION);
            Assert.Null(keymodel.CANCELLED_DATE);
            Assert.Null(keymodel.CUSTOMER_TYPE_CODE);
            Assert.Null(keymodel.CUSTOMER_STATUS_CODE);
            Assert.Null(keymodel.EXPECTED_ANNUAL_TURNOVER);
            Assert.Null(keymodel.BALANCE_SHEET_TOTAL);
            Assert.Null(keymodel.CUSTOMER_CATEGORY_CODE);
            Assert.Null(keymodel.COUNTRY_OF_TAX_RESIDENCE);
            Assert.Null(keymodel.COUNTRY_OF_HQ);
            Assert.Null(keymodel.COUNTRY_OF_OPERATIONS);
            Assert.Null(keymodel.IDENTIFICATION_NUMBER);
            Assert.Null(keymodel.ISSUING_AUTHORITY);
            Assert.Null(keymodel.COUNTRY_CODE);
            Assert.Equal(keymodel.VALID_FROM,validfrom);
            Assert.Equal(keymodel.VALID_TO,validto);
            Assert.Equal(keymodel.RUN_TIMESTAMP,runtime);
            Assert.Null(keymodel.VAT_NUMBER);
            Assert.Null(keymodel.DORMANT_OVERRIDE_DATE);
            Assert.Null(keymodel.PERSON_TITLE);
            Assert.Null(keymodel.FIRST_NAME);
            Assert.Null(keymodel.MIDDLE_NAMES);
            Assert.Null(keymodel.LAST_NAME);
            Assert.Null(keymodel.SUFFIX);
            Assert.Null(keymodel.COMPANY_NAME);
            Assert.Null(keymodel.REGISTERED_NUMBER);
            Assert.Null(keymodel.INCORPORATION_DATE);
            Assert.Null(keymodel.BUSINESS_SEGMENT);
            Assert.Null(keymodel.COMPANY_NAME);
            Assert.Null(keymodel.REGISTERED_NUMBER);
            Assert.Null(keymodel.INCORPORATION_DATE);
            Assert.Null(keymodel.BUSINESS_SEGMENT);
            Assert.Null(keymodel.INITIALS);
            Assert.Null(keymodel.NAME_OF_BIRTH);
            Assert.Null(keymodel.PLACE_OF_BIRTH);
            Assert.Null(keymodel.EMPLOYEE_FLAG);
            Assert.Null(keymodel.EMPLOYEE_NUMBER);
            Assert.Null(keymodel.ALTERNATE_NAME);
            Assert.Null(keymodel.CITY);
            Assert.Null(keymodel.POSTAL_CODE);
            Assert.Null(keymodel.ADDRESS_VALID_FROM);
            Assert.Null(keymodel.ADDRESS_VALID_TO);
            Assert.Null(keymodel.ACQUISITION_DATE);
            Assert.Null(keymodel.RESIDENCE_FLAG);
            Assert.Null(keymodel.SPECIAL_ATTENTION_FLAG);
            Assert.Null(keymodel.DECEASED_FLAG);
            Assert.Null(keymodel.COMPLEX_STRUCTURE);
            Assert.Null(keymodel.BLACK_LISTED_FLAG);
            Assert.Null(keymodel.EMAIL);
            Assert.Null(keymodel.EMAIL_VALID_FROM);
            Assert.Null(keymodel.EMAIL_VALID_TO);
            Assert.Null(keymodel.PHONE_COUNTRY_CODE);
            Assert.Null(keymodel.PHONE_AREA_CODE);
            Assert.Null(keymodel.PHONE_NUMBER);
            Assert.Null(keymodel.PHONE_EXTENSION);
            Assert.Null(keymodel.PHONE_VALID_FROM);
            Assert.Null(keymodel.PHONE_VALID_TO);
            Assert.Null(keymodel.TAX_NUMBER);
            Assert.Null(keymodel.TAX_NUMBER_ISSUED_BY);
            Assert.Null(keymodel.IDENTIFICATION_TYPE);
            Assert.Null(keymodel.TAX_NUMBER_TYPE);
            Assert.Null(keymodel.Customer_Identification);
            Assert.Null(keymodel.IDDoc_VALID_FROM);
            Assert.Null(keymodel.IDDoc_VALID_TO);
            Assert.Null(keymodel.X_SUBSCRIPTION_KEYWORD);
            Assert.Null(keymodel.X_SOURCE_SYSTEM);
            Assert.Null(keymodel.X_SENSITIVE_CUSTOMER_FLAG);
            Assert.Null(keymodel.X_NEW_CUSTOMER_SOURCE_UNIQUE_ID);
            Assert.Null(keymodel.X_OLD_CUSTOMER_SOURCE_UNIQUE_ID);
            Assert.Null(keymodel.X_CUSTOMER_INTERMEDIARY_REF_ID);
            Assert.Null(keymodel.X_SCREENING_END_DATE);
            Assert.Null(keymodel.WIRE_IN_VOLUME);
            Assert.Null(keymodel.WIRE_OUT_VOLUME);
            Assert.Null(keymodel.CASH_IN_VOLUME);
            Assert.Null(keymodel.CASH_OUT_VOLUME);
            Assert.Null(keymodel.CHECK_IN_VOLUME);
            Assert.Null(keymodel.CHECK_OUT_VOLUME);
            Assert.Null(keymodel.OVERALL_SCORE_ADJUSTMENT);
            Assert.Null(keymodel.OWN_AFFILIATE_FLAG);
            Assert.Null(keymodel.MARKETING_SERVICE_LEVEL);
            Assert.Null(keymodel.SANCTIONED_FLAG_INGESTED);
            Assert.Null(keymodel.PEP_TYPE_INGESTED);
            Assert.Null(keymodel.RCA_FLAG_INGESTED);
            Assert.Null(keymodel.BUSINESS_CLASSIFICATION_CODE);
            Assert.Null(keymodel.BUSINESS_CLASSIFICATION_SYSTEM);
            Assert.Null(keymodel.CUSTOMER_CHANNEL_REMOTE_FLAG);
            Assert.Null(keymodel.NATIONALITY_CODE_2);
            Assert.Null(keymodel.DESCRIPTION);
            Assert.Null(keymodel.DETAILS);
            Assert.Null(keymodel.VISA_TYPE);
            Assert.Null(keymodel.BUSINESS_TYPE);
            Assert.Null(keymodel.BUSINESS_SEGMENT_2);
            Assert.Null(keymodel.MARITAL_STATUS);
            Assert.Null(keymodel.EMPLOYMENT_STATUS);
            Assert.Null(keymodel.CUSTOMER_SEGMENT_1);
            Assert.Null(keymodel.CUSTOMER_SEGMENT_2);
            Assert.Null(keymodel.CUSTOMER_SEGMENT_3);
            Assert.Null(keymodel.RISK_SCORE);
            Assert.Null(keymodel.BANKRUPT_FLAG);
            Assert.Null(keymodel.COMPENSATION_REQD_FLAG);
            Assert.Null(keymodel.CUSTOMER_COMPLAINT_FLAG);
            Assert.Null(keymodel.END_RELATIONSHIP_FLAG);
            Assert.Null(keymodel.MERCHANT_NUMBER);
            Assert.Null(keymodel.FACE_TO_FACE_FLAG);
            Assert.Null(keymodel.NEAR_BORDER_FLAG);
            Assert.Null(keymodel.INTENDED_PRODUCT_USE);
            Assert.Null(keymodel.SOURCE_OF_FUNDS);
            Assert.Null(keymodel.TRADING_DURATION);
            Assert.Null(keymodel.BROKER_CODE);
            Assert.Null(keymodel.DOMAIN_CODE);
            Assert.Null(keymodel.COMMENTS);
            Assert.Null(keymodel.PEP_FLAG_INGESTED);
            Assert.Null(keymodel.WIRE_IN_NUMBER);
            Assert.Null(keymodel.WIRE_OUT_NUMBER);
            Assert.Null(keymodel.channel);
            Assert.Null(keymodel.AGE);
            Assert.Null(keymodel.MODIFIED_DATE);
            Assert.Equal(default(DateTime), keymodel.CREATE_DATE);
        }
    }
}
